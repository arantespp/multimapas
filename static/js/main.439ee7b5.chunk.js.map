{"version":3,"sources":["components/Maps/index.tsx","key.ts","components/Loading/index.tsx","components/GetLatLng/index.tsx","components/RowDetails/index.tsx","components/Multimapa/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","markerClusterer","key","Loading","react_default","a","createElement","geocoderTimeout","hasLatLng","row","latitude","longitude","getAddress","_ref","NM_LOGRADO","NU_NUMERO","concat","React","memo","_ref2","data","isActive","setData","headers","downloadData","close","_useState","useState","_useState2","Object","slicedToArray","geocoderStarted","setGeocoderStarted","console","log","es","params","libraries","render","googleMaps","components_Loading","geocoder","Geocoder","getLatLng","address","Promise","resolve","reject","setTimeout","Date","getSeconds","geocode","result","status","GeocoderStatus","OK","error","allLatLngToBeDiscovered","filter","tries","nextLatLngToBeDiscovered","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","latLngToBeDiscovered","value","err","return","getAllLatLng","_ref3","asyncToGenerator","regenerator_default","mark","_callee","_ref4","geometry","wrap","_context","prev","abrupt","sent","location","lat","lng","_ref5","id","JSON","stringify","t0","stop","apply","this","arguments","className","onClick","length","aria-label","style","justifyContent","disabled","then","catch","markers","setRowDetails","mapRef","useRef","Map","current","center","zoom","forEach","marker","setMap","position","LatLng","Number","Marker","addListener","e","clearMarkers","MarkerClusterer","imagePath","ref","RowDetails","entries","Multimapa","_useState3","_useState4","setIsDropdownActive","_useState5","_useState6","fileName","setFileName","_useState7","_useState8","setHeaders","_useState9","_useState10","loading","setLoading","_useState11","_useState12","showGetLatLng","setShowGetLatLng","_useState13","activeGetLatLng","_useState15","_useState16","rowDetails","fileRef","components_GetLatLng","parse","workbook","XLSX","utils","book_new","SheetNames","push","worksheet","json_to_sheet","Sheets","writeFile","split","components_RowDetails","display","accept","type","onChange","event","target","files","file","name","reader","FileReader","readAsBinaryString","onload","read","firstSheetName","json","sheet_to_json","index","objectSpread","reduce","acc","keys","getHeaders","checkIfLatLngExist","click","components_Maps","library","add","faAngleDown","faSearch","App","alignItems","components_Multimapa","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAcIA,EAEAC,wHChBSC,EAAM,0CCMJC,EAJC,WACd,OAAOC,EAAAC,EAAAC,cAAA,2BCYLC,SAAkB,KAGhBC,EAAY,SAACC,GAAD,QAAyBA,EAAIC,YAAcD,EAAIE,WAE3DC,EAAa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,WAAYC,EAAfF,EAAeE,UAAf,SAAAC,OACdF,EADc,KAAAE,OACAD,EADA,wBAsKJE,MAAMC,KA5JhB,SAAAC,GAA+D,IAA5DC,EAA4DD,EAA5DC,KAAMC,EAAsDF,EAAtDE,SAAmBC,GAAmCH,EAA5CI,QAA4CJ,EAAnCG,SAASE,EAA0BL,EAA1BK,aAAcC,EAAYN,EAAZM,MAAYC,EACpBC,oBAAS,GADWC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3DK,EAD2DH,EAAA,GAC1CI,EAD0CJ,EAAA,GAKlE,OAFAK,QAAQC,IAAI,WAAYH,GAGtB3B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEC,OAAQ,CAAElC,MAAKmC,UAAW,mBAC1BC,OAAQ,SAAAC,GACN,IAAOA,EACL,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAGTP,QAAQC,IAAI,8BAA+BH,GAE3C,IAAMU,EAAW,IAAIF,EAAWG,SAE1BC,EAAY,SAChBC,GAEA,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACTf,QAAQC,IAAI,YAAY,IAAIe,MAAOC,aAAcN,GACjDH,EAASU,QAAQ,CAAEP,WAAW,SAACQ,EAAQC,GACjCA,IAAWd,EAAWe,eAAeC,GACvCT,EAAQM,EAAO,KAEfnB,QAAQuB,MAAMH,GACdN,EAAOM,OAGV9C,MAcHkD,EAAkDrC,EACnDsC,OAAO,SAAAjD,GAAG,OAAKD,EAAUC,KACzBT,IAAI,SAAAS,GAAG,MAAK,CAAEkD,MAAO,EAAGlD,SAErBmD,EAA2B,WAEhB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACf,QAAAC,EAAAC,EAAmCT,EAAnCU,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA4D,KAAjDU,EAAiDN,EAAAO,MAC1D,GAAID,EAAqBZ,MArEnB,EAsEJ,OAAOY,GAHI,MAAAE,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,KAQXY,EAAY,eAAAC,EAAA/C,OAAAgD,EAAA,EAAAhD,CAAAiD,EAAAzE,EAAA0E,KAAG,SAAAC,IAAA,IAAAX,EAAAzB,EAAAqC,EAAAC,EAAA,OAAAJ,EAAAzE,EAAA8E,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAf,MAAA,UACbA,EAAOT,IACb3B,QAAQC,IAAI,gBAAiBH,GACtBsC,EAHY,CAAAe,EAAAf,KAAA,eAAAe,EAAAE,OAAA,wBAOnBrD,QAAQC,IAAI,gBAAiBH,GAPVqD,EAAAC,KAAA,EAUXzC,EAAUhC,EAAWyD,EAAK5D,KAVf2E,EAAAf,KAAA,EAWU1B,EAAUC,GAXpB,OAAAqC,EAAAG,EAAAG,KAWTL,EAXSD,EAWTC,SACRjD,QAAQC,IAAI,MAAOH,GACnBsC,EAAK5D,IAAIC,SAAWwE,EAASM,SAASC,MACtCpB,EAAK5D,IAAIE,UAAYuE,EAASM,SAASE,MAEvCjC,EAA0BA,EAAwBC,OAChD,SAAAiC,GAAA,OAAAA,EAAGlF,IAAcmF,KAAOvB,EAAK5D,IAAImF,KAEnCtE,EAAQuE,KAAKC,UAAU1E,IAnBNgE,EAAAf,KAAA,iBAAAe,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,SAqBjBnD,QAAQuB,MAAM,mBAAd4B,EAAAW,IACAxF,GA/Fc,IAgGd8D,EAAKV,OAAS,EAvBG,eA0BnB1B,QAAQC,IAAI,wBAAyBH,GA1BlBqD,EAAAf,KAAA,GA4BbM,IA5Ba,yBAAAS,EAAAY,SAAAhB,EAAA,kBAAH,yBAAAJ,EAAAqB,MAAAC,KAAAC,YAAA,GA6ClB,OACE/F,EAAAC,EAAAC,cAAA,OAAK8F,UAAS,SAAApF,OAAWK,GAAY,cACnCjB,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,mBAAmBC,QAAS5E,IAC3CrB,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,cACbhG,EAAAC,EAAAC,cAAA,UAAQ8F,UAAU,mBAChBhG,EAAAC,EAAAC,cAAA,KAAG8F,UAAU,oBAAb,iCACiChF,EAAKkF,OADtC,UAGAlG,EAAAC,EAAAC,cAAA,UAAQ8F,UAAU,SAASG,aAAW,QAAQF,QAAS5E,KAEzDrB,EAAAC,EAAAC,cAAA,WAAS8F,UAAU,mBACjBhG,EAAAC,EAAAC,cAAA,KAAG8F,UAAU,cAAb,kCACkC,IAC/BhF,EAAKsC,OAAO,SAAAjD,GAAG,OAAID,EAAUC,KAAM6F,QAGtClG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAG8F,UAAU,cAAb,kCACkC,IAC/BhF,EAAKsC,OAAO,SAAAjD,GAAG,OAAKD,EAAUC,KAAM6F,SAGzClG,EAAAC,EAAAC,cAAA,UACE8F,UAAU,kBACVI,MAAO,CAAEC,eAAgB,kBAEvB1E,EASA3B,EAAAC,EAAAC,cAAA,UAAQ8F,UAAU,oBAAoBC,QAxG3B,WACnBpE,QAAQC,IAAIH,KAuGJ,SARA3B,EAAAC,EAAAC,cAAA,UACE8F,UAAU,oBACVM,SAAyD,IAA/CtF,EAAKsC,OAAO,SAAAjD,GAAG,OAAKD,EAAUC,KAAM6F,OAC9CD,QA3CU,WACpBpE,QAAQC,IAAI,iBAAkBH,GAC9BC,GAAmB,GACnBC,QAAQC,IAAI,iBAAkBH,GAE9B4C,IACGgC,KAAK,WACJ1E,QAAQC,IAAI,aAAcH,KAG3B6E,MAAM,SAAAnC,GAAG,OAAIxC,QAAQuB,MAAM,OAAQiB,OA8B9B,iBAYFrE,EAAAC,EAAAC,cAAA,UAAQ8F,UAAU,SAASC,QAAS7E,GAApC,yBAKJpB,EAAAC,EAAAC,cAAA,UAAQ8F,UAAU,uBAAuBG,aAAW,gBHnK5DM,SAAgC,IAoDrB5F,MAAMC,KAjDsD,SAAAL,GAGrE,IAFJiG,EAEIjG,EAFJiG,cACA1F,EACIP,EADJO,KAEM2F,EAASC,iBAAO,MAEtB,OACE5G,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEC,OAAQ,CAAElC,MAAKmC,UAAW,mBAC1BC,OAAQ,SAAAC,GAkCN,OAjCMA,IACGvC,IACLA,EAAM,IAAIuC,EAAW0E,IAAIF,EAAOG,QAAS,CACvCC,OAAQ,CAAE1B,KAAM,QAASC,KAAM,SAC/B0B,KAAM,MAIVP,EAAQQ,QAAQ,SAAAC,GAAM,OAAIA,EAAOC,OAAO,QAExCV,EAAUzF,EAAKpB,IAAI,SAAAS,GACjB,IAAM+G,EAAW,IAAIjF,EAAWkF,OAC9BC,OAAOjH,EAAIC,UACXgH,OAAOjH,EAAIE,YAEP2G,EAAS,IAAI/E,EAAWoF,OAAO,CAAEH,WAAUxH,QAMjD,OAJAsH,EAAOM,YAAY,WAAY,SAAAC,GAC7Bf,EAAcrG,KAGT6G,IAGHrH,GACJA,EAAgB6H,eAGlB7H,EAAkB,IAAI8H,gBAAgB/H,EAAK6G,EAAS,CAClDmB,UACE,4FAGC5H,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,MAAM6B,IAAKlB,SIhB1BmB,SAjCV,SAAArH,GAA8B,IAA3BQ,EAA2BR,EAA3BQ,SAAUI,EAAiBZ,EAAjBY,MAAOhB,EAAUI,EAAVJ,IACvB,OACEL,EAAAC,EAAAC,cAAA,OAAK8F,UAAS,SAAApF,OAAWK,GAAY,cACnCjB,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,mBAAmBC,QAAS5E,IAC3CrB,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,cACbhG,EAAAC,EAAAC,cAAA,UAAQ8F,UAAU,mBAChBhG,EAAAC,EAAAC,cAAA,KAAG8F,UAAU,oBAAb,YACAhG,EAAAC,EAAAC,cAAA,UAAQ8F,UAAU,SAASG,aAAW,QAAQF,QAAS5E,KAEzDrB,EAAAC,EAAAC,cAAA,WAAS8F,UAAU,mBACjBhG,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,WACbhG,EAAAC,EAAAC,cAAA,MAAI8F,UAAU,kBACXvE,OAAOsG,QAAQ1H,GAAO,IAAIT,IAAI,SAAAmB,GAAkB,IAAAyD,EAAA/C,OAAAC,EAAA,EAAAD,CAAAV,EAAA,GAAhBjB,EAAgB0E,EAAA,GAAXJ,EAAWI,EAAA,GAC/C,OACExE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,cAASJ,EAAT,KADF,IAC2BsE,QAOrCpE,EAAAC,EAAAC,cAAA,UAAQ8F,UAAU,mBAChBhG,EAAAC,EAAAC,cAAA,UAAQ8F,UAAU,SAASC,QAAS5E,GAApC,YAKJrB,EAAAC,EAAAC,cAAA,UAAQ8F,UAAU,uBAAuBG,aAAW,aCoL3C6B,SA9La,WAAM,IAAA1G,EACRC,mBAAiBkE,KAAKC,UAAU,KADxBlE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBN,EADyBQ,EAAA,GACnBN,EADmBM,EAAA,GAAAyG,EAEgB1G,oBAAS,GAFzB2G,EAAAzG,OAAAC,EAAA,EAAAD,CAAAwG,EAAA,GAEPE,GAFOD,EAAA,GAAAA,EAAA,IAAAE,EAGA7G,mBAAS,IAHT8G,EAAA5G,OAAAC,EAAA,EAAAD,CAAA2G,EAAA,GAGzBE,EAHyBD,EAAA,GAGfE,EAHeF,EAAA,GAAAG,EAKFjH,mBAAmB,IALjBkH,EAAAhH,OAAAC,EAAA,EAAAD,CAAA+G,EAAA,GAKzBrH,EALyBsH,EAAA,GAKhBC,EALgBD,EAAA,GAAAE,EAMFpH,oBAAS,GANPqH,EAAAnH,OAAAC,EAAA,EAAAD,CAAAkH,EAAA,GAMzBE,EANyBD,EAAA,GAMhBE,EANgBF,EAAA,GAAAG,EAOUxH,oBAAS,GAPnByH,EAAAvH,OAAAC,EAAA,EAAAD,CAAAsH,EAAA,GAOzBE,EAPyBD,EAAA,GAOVE,EAPUF,EAAA,GAAAG,EAQN5H,oBAAS,GAA5B6H,EARyB3H,OAAAC,EAAA,EAAAD,CAAA0H,EAAA,MAAAE,EASI9H,mBAAqB,MATzB+H,EAAA7H,OAAAC,EAAA,EAAAD,CAAA4H,EAAA,GASzBE,EATyBD,EAAA,GASb5C,EATa4C,EAAA,GAW1BE,EAAU5C,iBAAyB,MA2EzC,OACE5G,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,YAAYC,QA1EJ,WACvBkC,GAAoB,KA0ElBnI,EAAAC,EAAAC,cAACuJ,EAAD,CACExI,SAAUgI,EACVjI,KAAMyE,KAAKiE,MAAM1I,GACjBG,QAASA,EACTD,QAASA,EACTG,MAxBiB,WACrB6H,GAAiB,GACjBJ,GAAW,IAuBP1H,aApBe,WACnB,IAAMuI,EAAWC,IAAKC,MAAMC,WAC5BH,EAASI,WAAWC,KAAK,SACzB,IAAMC,EAAYL,IAAKC,MAAMK,cAAczE,KAAKiE,MAAM1I,IACtD2I,EAASQ,OAAT,MAA2BF,EAC3BL,IAAKQ,UAAUT,EAAf,GAAA/I,OAA4B0H,EAAS+B,MAAM,KAAK,GAAhD,qBAiBErK,EAAAC,EAAAC,cAACoK,EAAD,CACErJ,WAAYsI,EACZlJ,IAAKkJ,EACLlI,MAjBkB,WACtBqF,EAAc,SAkBZ1G,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,mCACbhG,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,sEACbhG,EAAAC,EAAAC,cAAA,KAAG8F,UAAU,qCAAb,wBAAApF,OACE0H,EAAW,KAAOA,EAAW,KAE/BtI,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,eACbhG,EAAAC,EAAAC,cAAA,SACEkG,MAAO,CAAEmE,QAAS,QAClBC,OAAO,oBACPC,KAAK,OACLjF,GAAG,YACHqC,IAAK2B,EACLkB,SAjFc,SAACC,GACzB,GAAOA,EAAMC,OAAOC,MAApB,CAIA/B,GAAW,GAEX,IAAMgC,EAAOH,EAAMC,OAAOC,MAAM,GAChCtC,EAAYuC,EAAKC,MAEjB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,mBAAmBJ,GAC1BE,EAAOG,OAAS,WACd,IAAMnK,EAAOgK,EAAOhI,OACd2G,EAAWC,IAAKwB,KAAKpK,EAAM,CAAEyJ,KAAM,WACnCY,EAAiB1B,EAASI,WAAW,GACrCE,EAAYN,EAASQ,OAAOkB,GAE5BC,EAAsC1B,IAAKC,MAC9C0B,cAActB,GAEdrK,IAAI,SAACS,EAAKmL,GAAN,OAAA/J,OAAAgK,EAAA,EAAAhK,CAAA,CAAmB+D,GAAIgG,GAAUnL,KAExCa,EAAQuE,KAAKC,UAAU4F,IAEvB5C,EAvEa,SAAC4C,GAClB,IAAMnK,EAAemK,EAAKI,OAAO,SAACC,EAAKtL,GAErC,OADAoB,OAAOmK,KAAKvL,GAAK4G,QAAQ,SAAAnH,GAAG,OAAK6L,EAAI7L,GAAO,IACrC6L,GACN,IACH,OAAOlK,OAAOmK,KAAKzK,GAkEJ0K,CAAWP,IAEtBxC,GAAW,IAjEU,SAACwC,GAC1B,OAAOA,EAAKI,OAAgB,SAACC,EAAKtL,GAChC,OAAOsL,KAAStL,EAAIC,YAAcD,EAAIE,YACrC,GAgEMuL,CAAmBR,IAASlC,EAC/BF,GAAiB,GAEjBJ,GAAW,QAmDP9I,EAAAC,EAAAC,cAAA,UACE8F,UAAS,kCAAApF,OACPiI,EAAU,aAAe,IAE3B5C,QA7FY,WAClBuD,GAAWA,EAAQ1C,SACrB0C,EAAQ1C,QAAQiF,UAuFV,oBAmEJ/L,EAAAC,EAAAC,cAAA,OAAKsF,GAAG,OAAOQ,UAAU,UACvBhG,EAAAC,EAAAC,cAAC8L,EAAD,CAAMhL,KAAMyE,KAAKiE,MAAM1I,GAAO0F,cAAeA,eC5MvDuF,IAAQC,IAAIC,IAAaC,KAEzB,IAgBeC,EAhBO,WACpB,OACErM,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,OACbhG,EAAAC,EAAAC,cAAA,UACE8F,UAAU,mCACVI,MAAO,CAAEC,eAAgB,SAAUiG,WAAY,WAE/CtM,EAAAC,EAAAC,cAAA,MAAI8F,UAAU,oCAAd,cAEFhG,EAAAC,EAAAC,cAAA,QAAM8F,UAAU,4BACdhG,EAAAC,EAAAC,cAACqM,EAAD,SCTYC,QACW,cAA7BC,OAAOrH,SAASsH,UAEe,UAA7BD,OAAOrH,SAASsH,UAEhBD,OAAOrH,SAASsH,SAASC,MACvB,2DCZNC,IAAS1K,OAAOlC,EAAAC,EAAAC,cAAC2M,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3G,KAAK,SAAA4G,GACjCA,EAAaC","file":"static/js/main.439ee7b5.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\n\nimport ReactGoogleMapLoader from \"react-google-maps-loader\";\n\nimport { key } from \"../../key\";\n\nimport \"./styles.scss\";\n\ndeclare var MarkerClusterer: any;\n\ninterface Row {\n  [key: string]: string | number;\n}\n\nlet map: google.maps.Map;\nlet markers: google.maps.Marker[] = [];\nlet markerClusterer: typeof MarkerClusterer;\n\nconst Maps: React.FC<{ setRowDetails: (row: Row) => void; data: Row[] }> = ({\n  setRowDetails,\n  data\n}) => {\n  const mapRef = useRef(null);\n\n  return (\n    <ReactGoogleMapLoader\n      params={{ key, libraries: \"places,geometry\" }}\n      render={googleMaps => {\n        if (!!googleMaps) {\n          if (!!!map) {\n            map = new googleMaps.Map(mapRef.current, {\n              center: { lat: -22.0087, lng: -47.8909 },\n              zoom: 14\n            });\n          }\n\n          markers.forEach(marker => marker.setMap(null));\n\n          markers = data.map(row => {\n            const position = new googleMaps.LatLng(\n              Number(row.latitude),\n              Number(row.longitude)\n            );\n            const marker = new googleMaps.Marker({ position, map });\n\n            marker.addListener(\"dblclick\", e => {\n              setRowDetails(row);\n            });\n\n            return marker;\n          });\n\n          if (!!markerClusterer) {\n            markerClusterer.clearMarkers();\n          }\n\n          markerClusterer = new MarkerClusterer(map, markers, {\n            imagePath:\n              \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\"\n          });\n        }\n        return <div className=\"Map\" ref={mapRef} />;\n      }}\n    />\n  );\n};\n\nexport default React.memo(Maps);\n","export const key = \"AIzaSyA_fdJhInwwadaeFnUAe-r18Wzhx4S3-o4\";\n","import React from \"react\";\n\nconst Loading = () => {\n  return <span>Carregando</span>;\n};\n\nexport default Loading;\n","import React, { useState } from \"react\";\n\nimport ReactGoogleMapLoader from \"react-google-maps-loader\";\n\nimport { key } from \"../../key\";\n\nimport Loading from \"../Loading\";\n\nimport \"./styles.scss\";\n\ninterface Row {\n  [key: string]: string | number;\n}\n\nconst MAX_TRIES = 3;\nlet geocoderTimeout = 500;\nconst GEOCODER_INCREASE = 250;\n\nconst hasLatLng = (row: Row): boolean => !!row.latitude && !!row.longitude;\n\nconst getAddress = ({ NM_LOGRADO, NU_NUMERO }: Row): string =>\n  `${NM_LOGRADO} ${NU_NUMERO} São Carlos - SP`;\n\nconst GetLatLng: React.FC<{\n  isActive?: boolean;\n  data: Row[];\n  headers: string[];\n  setData: (data: string) => void;\n  downloadData: () => void;\n  close: () => void;\n}> = ({ data, isActive, headers, setData, downloadData, close }) => {\n  const [geocoderStarted, setGeocoderStarted] = useState(false);\n\n  console.log(\"function\", geocoderStarted);\n\n  return (\n    <ReactGoogleMapLoader\n      params={{ key, libraries: \"places,geometry\" }}\n      render={googleMaps => {\n        if (!!!googleMaps) {\n          return <Loading />;\n        }\n\n        console.log(\"return ReactGoogleMapLoader\", geocoderStarted);\n\n        const geocoder = new googleMaps.Geocoder();\n\n        const getLatLng = (\n          address: string\n        ): Promise<google.maps.GeocoderResult> => {\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              console.log(\"geocoder\", new Date().getSeconds(), address);\n              geocoder.geocode({ address }, (result, status) => {\n                if (status === googleMaps.GeocoderStatus.OK) {\n                  resolve(result[0]);\n                } else {\n                  console.error(status);\n                  reject(status);\n                }\n              });\n            }, geocoderTimeout);\n          });\n        };\n\n        const stopGeocoder = () => {\n          console.log(geocoderStarted);\n          // setGeocoderStarted(false);\n        };\n\n        interface LatLngToBeDiscovered {\n          row: Row;\n          tries: number;\n        }\n\n        let allLatLngToBeDiscovered: LatLngToBeDiscovered[] = data\n          .filter(row => !hasLatLng(row))\n          .map(row => ({ tries: 0, row }));\n\n        const nextLatLngToBeDiscovered = ():\n          | LatLngToBeDiscovered\n          | undefined => {\n          for (const latLngToBeDiscovered of allLatLngToBeDiscovered) {\n            if (latLngToBeDiscovered.tries < MAX_TRIES) {\n              return latLngToBeDiscovered;\n            }\n          }\n        };\n\n        const getAllLatLng = async () => {\n          const next = nextLatLngToBeDiscovered();\n          console.log(\"getAllLatLng1\", geocoderStarted);\n          if (!!!next) {\n            return;\n          }\n\n          console.log(\"getAllLatLng2\", geocoderStarted);\n\n          try {\n            const address = getAddress(next.row);\n            const { geometry } = await getLatLng(address);\n            console.log(\"try\", geocoderStarted);\n            next.row.latitude = geometry.location.lat();\n            next.row.longitude = geometry.location.lng();\n            // Remove data\n            allLatLngToBeDiscovered = allLatLngToBeDiscovered.filter(\n              ({ row }) => row.id !== next.row.id\n            );\n            setData(JSON.stringify(data));\n          } catch (err) {\n            console.error(\"getAllLatLng err\", err);\n            geocoderTimeout += GEOCODER_INCREASE;\n            next.tries += 1;\n          }\n\n          console.log(\"final da getAllLatLng\", geocoderStarted);\n          // if (geocoderStarted) {\n          await getAllLatLng();\n          // }\n        };\n\n        const startGeocoder = () => {\n          console.log(\"startGeocoder1\", geocoderStarted);\n          setGeocoderStarted(true);\n          console.log(\"startGeocoder2\", geocoderStarted);\n\n          getAllLatLng()\n            .then(() => {\n              console.log(\"AAAAAAAAAA\", geocoderStarted);\n              // setGeocoderStarted(false);\n            })\n            .catch(err => console.error(\"err2\", err));\n        };\n\n        return (\n          <div className={`modal ${isActive && \"is-active\"}`}>\n            <div className=\"modal-background\" onClick={close} />\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <p className=\"modal-card-title\">\n                  Obter latitude e longitude de {data.length} dados\n                </p>\n                <button className=\"delete\" aria-label=\"close\" onClick={close} />\n              </header>\n              <section className=\"modal-card-body\">\n                <p className=\"title is-6\">\n                  Dados com latitude e longitude:{\" \"}\n                  {data.filter(row => hasLatLng(row)).length}\n                </p>\n\n                <hr />\n                <p className=\"title is-6\">\n                  Dados sem latitude e longitude:{\" \"}\n                  {data.filter(row => !hasLatLng(row)).length}\n                </p>\n              </section>\n              <footer\n                className=\"modal-card-foot\"\n                style={{ justifyContent: \"space-between\" }}\n              >\n                {!geocoderStarted ? (\n                  <button\n                    className=\"button is-success\"\n                    disabled={data.filter(row => !hasLatLng(row)).length === 0}\n                    onClick={startGeocoder}\n                  >\n                    Obter lat/lng\n                  </button>\n                ) : (\n                  <button className=\"button is-success\" onClick={stopGeocoder}>\n                    Parar\n                  </button>\n                )}\n                <button className=\"button\" onClick={downloadData}>\n                  Baixar novo arquivo\n                </button>\n              </footer>\n            </div>\n            <button className=\"modal-close is-large\" aria-label=\"close\" />\n          </div>\n        );\n      }}\n    />\n  );\n};\n\nexport default React.memo(GetLatLng);\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\ninterface Row {\n  [key: string]: string | number;\n}\n\nconst RowDetails: React.FC<{\n  close: () => void;\n  isActive: boolean;\n  row: Row | null;\n}> = ({ isActive, close, row }) => {\n  return (\n    <div className={`modal ${isActive && \"is-active\"}`}>\n      <div className=\"modal-background\" onClick={close} />\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">Detalhes</p>\n          <button className=\"delete\" aria-label=\"close\" onClick={close} />\n        </header>\n        <section className=\"modal-card-body\">\n          <div className=\"content\">\n            <ol className=\"is-upper-alpha\">\n              {Object.entries(row || {}).map(([key, value]) => {\n                return (\n                  <li>\n                    <strong>{key}:</strong> {value}\n                  </li>\n                );\n              })}\n            </ol>\n          </div>\n        </section>\n        <footer className=\"modal-card-foot\">\n          <button className=\"button\" onClick={close}>\n            Fechar\n          </button>\n        </footer>\n      </div>\n      <button className=\"modal-close is-large\" aria-label=\"close\" />\n    </div>\n  );\n};\n\nexport default RowDetails;\n","import React, { useRef, useState } from \"react\";\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport XLSX from \"xlsx\";\n// import utf8 from \"utf8\";\n\nimport GetLatLng from \"../GetLatLng\";\nimport Maps from \"../Maps\";\nimport RowDetails from \"../RowDetails\";\n\nimport \"./styles.scss\";\n\ninterface Row {\n  [key: string]: string | number;\n}\n\nconst getHeaders = (json: Row[]): string[] => {\n  const headers: any = json.reduce((acc, row) => {\n    Object.keys(row).forEach(key => (acc[key] = 1));\n    return acc;\n  }, {});\n  return Object.keys(headers);\n};\n\nconst checkIfLatLngExist = (json: Row[]): boolean => {\n  return json.reduce<boolean>((acc, row) => {\n    return acc && !!row.latitude && !!row.longitude;\n  }, true);\n};\n\nconst Multimapa: React.FC = () => {\n  const [data, setData] = useState<string>(JSON.stringify([]));\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const [fileName, setFileName] = useState(\"\");\n  // const [header, setHeader] = useState<string>(\"\");\n  const [headers, setHeaders] = useState<string[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showGetLatLng, setShowGetLatLng] = useState(false);\n  const [activeGetLatLng] = useState(false);\n  const [rowDetails, setRowDetails] = useState<Row | null>(null);\n\n  const fileRef = useRef<HTMLInputElement>(null);\n\n  const multimapaOnClick = () => {\n    setIsDropdownActive(false);\n  };\n\n  // const dropdownOnClick = (\n  //   event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  // ) => {\n  //   event.stopPropagation();\n  //   setIsDropdownActive(!isDropdownActive);\n  // };\n\n  // const dropdownHeaderOnClick = (header: string) => () => setHeader(header);\n\n  const openFileOnClick = () => {\n    if (fileRef && fileRef.current) {\n      fileRef.current.click();\n    }\n  };\n\n  const fileInputOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!!!event.target.files) {\n      return;\n    }\n\n    setLoading(true);\n\n    const file = event.target.files[0];\n    setFileName(file.name);\n\n    const reader = new FileReader();\n    reader.readAsBinaryString(file);\n    reader.onload = () => {\n      const data = reader.result;\n      const workbook = XLSX.read(data, { type: \"binary\" });\n      const firstSheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[firstSheetName];\n\n      const json: Array<{ [key: string]: any }> = XLSX.utils\n        .sheet_to_json(worksheet)\n        // add id to json if it not exists\n        .map((row, index) => ({ id: index, ...row }));\n\n      setData(JSON.stringify(json));\n\n      setHeaders(getHeaders(json));\n\n      setLoading(true);\n\n      if (!checkIfLatLngExist(json) && activeGetLatLng) {\n        setShowGetLatLng(true);\n      } else {\n        setLoading(false);\n      }\n    };\n  };\n\n  const closeGetLatLng = () => {\n    setShowGetLatLng(false);\n    setLoading(false);\n  };\n\n  const downloadData = () => {\n    const workbook = XLSX.utils.book_new();\n    workbook.SheetNames.push(\"Dados\");\n    const worksheet = XLSX.utils.json_to_sheet(JSON.parse(data));\n    workbook.Sheets[\"Dados\"] = worksheet;\n    XLSX.writeFile(workbook, `${fileName.split(\".\")[0]}_lat-lng.xlsx`);\n  };\n\n  const closeRowDetails = () => {\n    setRowDetails(null);\n  };\n\n  return (\n    <div className=\"Multimapa\" onClick={multimapaOnClick}>\n      <GetLatLng\n        isActive={showGetLatLng}\n        data={JSON.parse(data)}\n        headers={headers}\n        setData={setData}\n        close={closeGetLatLng}\n        downloadData={downloadData}\n      />\n      <RowDetails\n        isActive={!!rowDetails}\n        row={rowDetails}\n        close={closeRowDetails}\n      />\n      <div className=\"columns is-variable is-1-mobile\">\n        <nav className=\"panel column is-narrow is-two-fifths-tablet is-one-quarter-desktop\">\n          <p className=\"panel-heading has-text-centered\t\">{`Dados Geolocalizados ${\n            fileName ? \"- \" + fileName : \"\"\n          }`}</p>\n          <div className=\"panel-block\">\n            <input\n              style={{ display: \"none\" }}\n              accept=\".xlsx, .xls, .csv\"\n              type=\"file\"\n              id=\"fileInput\"\n              ref={fileRef}\n              onChange={fileInputOnChange}\n            />\n            <button\n              className={`button is-primary is-fullwidth ${\n                loading ? \"is-loading\" : \"\"\n              }`}\n              onClick={openFileOnClick}\n            >\n              Carregar Dados\n            </button>\n          </div>\n\n          {/* <div className=\"panel-block\">\n          <p className=\"control has-icons-left\">\n            <input\n              className=\"input is-small\"\n              type=\"text\"\n              placeholder=\"procurar\"\n            />\n            <span className=\"icon is-small is-left\">\n              <FontAwesomeIcon icon=\"search\" />\n            </span>\n          </p>\n        </div>\n        <div className=\"panel-tabs\">\n          <div\n            className={`dropdown ${isDropdownActive ? \"is-active\" : \"\"}`}\n            onClick={dropdownOnClick}\n          >\n            <div className=\"dropdown-trigger\">\n              <button\n                className=\"button\"\n                aria-haspopup=\"true\"\n                aria-controls=\"dropdown-menu\"\n              >\n                <span>{`Agrupar por ${header ? \": \" + header : \"\"}`}</span>\n                <span className=\"icon is-small\">\n                  <FontAwesomeIcon icon=\"angle-down\" />\n                </span>\n              </button>\n            </div>\n            <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n              <div\n                className=\"dropdown-content\"\n                style={{ height: \"300px\", overflowY: \"scroll\" }}\n              >\n                <a\n                  href=\"#\"\n                  className={`dropdown-item ${!!!header ? \"is-active\" : \"\"}`}\n                  onClick={dropdownHeaderOnClick(\"\")}\n                >\n                  Nenhum\n                </a>\n                <hr className=\"dropdown-divider\" />\n                {headers.map(header => (\n                  <a\n                    href=\"#\"\n                    key={header}\n                    className=\"dropdown-item\"\n                    onClick={dropdownHeaderOnClick(header)}\n                  >\n                    {header}\n                  </a>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div> */}\n        </nav>\n        <div id=\"maps\" className=\"column\">\n          <Maps data={JSON.parse(data)} setRowDetails={setRowDetails} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Multimapa;\n","import React from \"react\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faAngleDown, faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Multimapa from \"./components/Multimapa\";\n\nimport \"./App.scss\";\n\nlibrary.add(faAngleDown, faSearch);\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header\n        className=\"is-flex has-text-centered header\"\n        style={{ justifyContent: \"center\", alignItems: \"center\" }}\n      >\n        <h1 className=\"is-size-3 has-text-weight-nomral\">Multimapa</h1>\n      </header>\n      <main className=\"main container is-fullhd\">\n        <Multimapa />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}