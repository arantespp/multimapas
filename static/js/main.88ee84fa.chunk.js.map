{"version":3,"sources":["components/Loading/index.tsx","components/GetLatLng/index.tsx","key.ts","components/Multimapa/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","react_default","a","createElement","hasLatLng","row","latitude","longitude","getAddress","_ref","NM_LOGRADO","NU_NUMERO","concat","GetLatLng","_ref2","data","isActive","setData","headers","downloadData","close","_useState","useState","_useState2","Object","slicedToArray","geocoderStated","setGeocoderStarted","es","params","key","libraries","render","googleMaps","components_Loading","geocoder","Geocoder","getLatLng","address","Promise","resolve","reject","console","log","setTimeout","geocode","result","status","GeocoderStatus","OK","error","className","onClick","length","aria-label","filter","style","justifyContent","disabled","allLatLngToBeDiscovered","map","tries","nextLatLngToBeDiscovered","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","latLngToBeDiscovered","value","err","return","getAllLatLng","_ref3","asyncToGenerator","regenerator_default","mark","_callee","_ref4","geometry","wrap","_context","prev","abrupt","sent","location","lat","lng","_ref5","id","JSON","stringify","t0","stop","apply","this","arguments","then","catch","Multimapa","_useState3","_useState4","isDropdownActive","setIsDropdownActive","_useState5","_useState6","fileName","setFileName","_useState7","_useState8","header","setHeader","_useState9","_useState10","setHeaders","_useState11","_useState12","loading","setLoading","_useState13","_useState14","showGetLatLng","setShowGetLatLng","fileRef","useRef","dropdownHeaderOnClick","components_GetLatLng","parse","workbook","XLSX","utils","book_new","SheetNames","push","worksheet","json_to_sheet","Sheets","writeFile","split","display","accept","type","ref","onChange","event","target","files","file","name","reader","FileReader","readAsBinaryString","onload","read","firstSheetName","json","sheet_to_json","index","objectSpread","reduce","acc","keys","forEach","getHeaders","checkIfLatLngExist","current","click","placeholder","react_fontawesome_index_es","icon","stopPropagation","aria-haspopup","aria-controls","role","height","overflowY","href","library","add","faAngleDown","faSearch","App","components_Multimapa","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mZAMeA,EAJC,WACd,OAAOC,EAAAC,EAAAC,cAAA,2BCcHC,SAAY,SAACC,GAAD,QAAyBA,EAAIC,YAAcD,EAAIE,YAE3DC,EAAa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,WAAYC,EAAfF,EAAeE,UAAf,SAAAC,OACdF,EADc,KAAAE,OACAD,EADA,wBA+IJE,EArIV,SAAAC,GAA+D,IAA5DC,EAA4DD,EAA5DC,KAAMC,EAAsDF,EAAtDE,SAAmBC,GAAmCH,EAA5CI,QAA4CJ,EAAnCG,SAASE,EAA0BL,EAA1BK,aAAcC,EAAYN,EAAZM,MAAYC,EACrBC,oBAAS,GADYC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3DK,EAD2DH,EAAA,GAC3CI,EAD2CJ,EAAA,GAGlE,OACEtB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEC,OAAQ,CAAEC,IClCG,0CDkCEC,UAAW,mBAC1BC,OAAQ,SAAAC,GACN,IAAOA,EACL,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAGT,IAAMC,EAAW,IAAIF,EAAWG,SAE1BC,EAAY,SAChBC,GAEA,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,QAAQC,IAAI,sBACZC,WAAW,WACTT,EAASU,QAAQ,CAAEP,WAAW,SAACQ,EAAQC,GACjCA,IAAWd,EAAWe,eAAeC,GACvCT,EAAQM,EAAO,KAEfJ,QAAQQ,MAAMH,GACdN,EAAOM,OAtCA,QAmGjB,OACE9C,EAAAC,EAAAC,cAAA,OAAKgD,UAAS,SAAAvC,OAAWI,GAAY,cACnCf,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,mBAAmBC,QAAShC,IAC3CnB,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,cACblD,EAAAC,EAAAC,cAAA,UAAQgD,UAAU,mBAChBlD,EAAAC,EAAAC,cAAA,KAAGgD,UAAU,oBAAb,iCACiCpC,EAAKsC,OADtC,UAGApD,EAAAC,EAAAC,cAAA,UAAQgD,UAAU,SAASG,aAAW,QAAQF,QAAShC,KAEzDnB,EAAAC,EAAAC,cAAA,WAASgD,UAAU,mBACjBlD,EAAAC,EAAAC,cAAA,KAAGgD,UAAU,cAAb,kCACkC,IAC/BpC,EAAKwC,OAAO,SAAAlD,GAAG,OAAID,EAAUC,KAAMgD,QAGtCpD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGgD,UAAU,cAAb,kCACkC,IAC/BpC,EAAKwC,OAAO,SAAAlD,GAAG,OAAKD,EAAUC,KAAMgD,SAGzCpD,EAAAC,EAAAC,cAAA,UACEgD,UAAU,kBACVK,MAAO,CAAEC,eAAgB,kBAEzBxD,EAAAC,EAAAC,cAAA,UACEgD,UAAS,qBAAAvC,OACPc,EAAiB,aAAe,IAElCgC,SAAyD,IAA/C3C,EAAKwC,OAAO,SAAAlD,GAAG,OAAKD,EAAUC,KAAMgD,OAC9CD,QArFY,WACpBzB,GAAmB,GAOnB,IAAIgC,EAAkD5C,EACnDwC,OAAO,SAAAlD,GAAG,OAAKD,EAAUC,KACzBuD,IAAI,SAAAvD,GAAG,MAAK,CAAEwD,MAAO,EAAGxD,SAErByD,EAA2B,WAEhB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACf,QAAAC,EAAAC,EAAmCT,EAAnCU,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA4D,KAAjDU,EAAiDN,EAAAO,MAC1D,GAAID,EAAqBZ,MA9DrB,EA+DF,OAAOY,GAHI,MAAAE,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,KAQXY,EAAY,eAAAC,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAwD,EAAA9E,EAAA+E,KAAG,SAAAC,IAAA,IAAAX,EAAAjC,EAAA6C,EAAAC,EAAA,OAAAJ,EAAA9E,EAAAmF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAf,MAAA,UACbA,EAAOT,IADM,CAAAwB,EAAAf,KAAA,eAAAe,EAAAE,OAAA,wBAAAF,EAAAC,KAAA,EAOXjD,EAAU9B,EAAW+D,EAAKlE,KAPfiF,EAAAf,KAAA,EAQUlC,EAAUC,GARpB,OAAA6C,EAAAG,EAAAG,KAQTL,EARSD,EAQTC,SACRb,EAAKlE,IAAIC,SAAW8E,EAASM,SAASC,MACtCpB,EAAKlE,IAAIE,UAAY6E,EAASM,SAASE,MAEvCjC,EAA0BA,EAAwBJ,OAChD,SAAAsC,GAAA,OAAAA,EAAGxF,IAAcyF,KAAOvB,EAAKlE,IAAIyF,KAEnC7E,EAAQ8E,KAAKC,UAAUjF,IAfNuE,EAAAf,KAAA,iBAAAe,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,SAiBjB5C,QAAQQ,MAAM,mBAAdoC,EAAAW,IACA1B,EAAKV,OAAS,EAlBG,QAqBnBgB,IArBmB,yBAAAS,EAAAY,SAAAhB,EAAA,kBAAH,yBAAAJ,EAAAqB,MAAAC,KAAAC,YAAA,GAwBlBxB,IACGyB,KAAK,WACJ5D,QAAQC,IAAI5B,GACZY,GAAmB,KAEpB4E,MAAM7D,QAAQQ,SA6BX,iBASAjD,EAAAC,EAAAC,cAAA,UAAQgD,UAAU,SAASC,QAASjC,GAApC,yBAKJlB,EAAAC,EAAAC,cAAA,UAAQgD,UAAU,uBAAuBG,aAAW,eE+CjDkD,SA7Ka,WAAM,IAAAnF,EACRC,mBAAiByE,KAAKC,UAAU,KADxBzE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBN,EADyBQ,EAAA,GACnBN,EADmBM,EAAA,GAAAkF,EAEgBnF,oBAAS,GAFzBoF,EAAAlF,OAAAC,EAAA,EAAAD,CAAAiF,EAAA,GAEzBE,EAFyBD,EAAA,GAEPE,EAFOF,EAAA,GAAAG,EAGAvF,mBAAS,IAHTwF,EAAAtF,OAAAC,EAAA,EAAAD,CAAAqF,EAAA,GAGzBE,EAHyBD,EAAA,GAGfE,EAHeF,EAAA,GAAAG,EAIJ3F,mBAAiB,IAJb4F,EAAA1F,OAAAC,EAAA,EAAAD,CAAAyF,EAAA,GAIzBE,EAJyBD,EAAA,GAIjBE,EAJiBF,EAAA,GAAAG,EAKF/F,mBAAmB,IALjBgG,EAAA9F,OAAAC,EAAA,EAAAD,CAAA6F,EAAA,GAKzBnG,EALyBoG,EAAA,GAKhBC,EALgBD,EAAA,GAAAE,EAMFlG,oBAAS,GANPmG,EAAAjG,OAAAC,EAAA,EAAAD,CAAAgG,EAAA,GAMzBE,EANyBD,EAAA,GAMhBE,EANgBF,EAAA,GAAAG,EAOUtG,oBAAS,GAPnBuG,EAAArG,OAAAC,EAAA,EAAAD,CAAAoG,EAAA,GAOzBE,EAPyBD,EAAA,GAOVE,EAPUF,EAAA,GAS1BG,EAAUC,iBAAyB,MAanCC,EAAwB,SAACf,GAAD,OAAoB,kBAAMC,EAAUD,KA0DlE,OACElH,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,YAAYC,QAtEJ,WACvBwD,GAAoB,KAsElB3G,EAAAC,EAAAC,cAACgI,EAAD,CACEnH,SAAU8G,EACV/G,KAAMgF,KAAKqC,MAAMrH,GACjBG,QAASA,EACTD,QAASA,EACTG,MApBiB,WACrB2G,GAAiB,GACjBJ,GAAW,IAmBPxG,aAhBe,WACnB,IAAMkH,EAAWC,IAAKC,MAAMC,WAC5BH,EAASI,WAAWC,KAAK,SACzB,IAAMC,EAAYL,IAAKC,MAAMK,cAAc7C,KAAKqC,MAAMrH,IACtDsH,EAASQ,OAAT,MAA2BF,EAC3BL,IAAKQ,UAAUT,EAAf,GAAAzH,OAA4BmG,EAASgC,MAAM,KAAK,GAAhD,qBAaE9I,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,SACblD,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,eACblD,EAAAC,EAAAC,cAAA,SACEqD,MAAO,CAAEwF,QAAS,QAClBC,OAAO,oBACPC,KAAK,OACLpD,GAAG,YACHqD,IAAKnB,EACLoB,SApEgB,SAACC,GACzB,GAAOA,EAAMC,OAAOC,MAApB,CAIA5B,GAAW,GAEX,IAAM6B,EAAOH,EAAMC,OAAOC,MAAM,GAChCvC,EAAYwC,EAAKC,MAEjB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,mBAAmBJ,GAC1BE,EAAOG,OAAS,WACd,IAAM9I,EAAO2I,EAAO5G,OACduF,EAAWC,IAAKwB,KAAK/I,EAAM,CAAEmI,KAAM,WACnCa,EAAiB1B,EAASI,WAAW,GACrCE,EAAYN,EAASQ,OAAOkB,GAE5BC,EAAsC1B,IAAKC,MAC9C0B,cAActB,GAEd/E,IAAI,SAACvD,EAAK6J,GAAN,OAAA1I,OAAA2I,EAAA,EAAA3I,CAAA,CAAmBsE,GAAIoE,GAAU7J,KAExCY,EAAQ8E,KAAKC,UAAUgE,IAEvBzC,EArEa,SAACyC,GAClB,IAAM9I,EAAe8I,EAAKI,OAAO,SAACC,EAAKhK,GAErC,OADAmB,OAAO8I,KAAKjK,GAAKkK,QAAQ,SAAAzI,GAAG,OAAKuI,EAAIvI,GAAO,IACrCuI,GACN,IACH,OAAO7I,OAAO8I,KAAKpJ,GAgEJsJ,CAAWR,IAEtBrC,GAAW,GA/DU,SAACqC,GAC1B,OAAOA,EAAKI,OAAgB,SAACC,EAAKhK,GAChC,OAAOgK,KAAShK,EAAIC,YAAcD,EAAIE,YACrC,GA8DMkK,CAAmBT,GAGtBrC,GAAW,GAFXI,GAAiB,QAwCf9H,EAAAC,EAAAC,cAAA,UACEgD,UAAS,kCAAAvC,OACP8G,EAAU,aAAe,IAE3BtE,QAhFc,WAClB4E,GAAWA,EAAQ0C,SACrB1C,EAAQ0C,QAAQC,UA0EZ,mBASF1K,EAAAC,EAAAC,cAAA,KAAGgD,UAAU,iBAAb,wBAAAvC,OACEmG,EAAW,KAAOA,EAAW,KAE/B9G,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,eACblD,EAAAC,EAAAC,cAAA,KAAGgD,UAAU,0BACXlD,EAAAC,EAAAC,cAAA,SACEgD,UAAU,iBACV+F,KAAK,OACL0B,YAAY,aAEd3K,EAAAC,EAAAC,cAAA,QAAMgD,UAAU,yBACdlD,EAAAC,EAAAC,cAAC0K,EAAA,EAAD,CAAiBC,KAAK,cAI5B7K,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,cACblD,EAAAC,EAAAC,cAAA,OACEgD,UAAS,YAAAvC,OAAc+F,EAAmB,YAAc,IACxDvD,QAhHc,SACtBiG,GAEAA,EAAM0B,kBACNnE,GAAqBD,KA8Gb1G,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,oBACblD,EAAAC,EAAAC,cAAA,UACEgD,UAAU,SACV6H,gBAAc,OACdC,gBAAc,iBAEdhL,EAAAC,EAAAC,cAAA,2BAAAS,OAAsBuG,EAAS,KAAOA,EAAS,KAC/ClH,EAAAC,EAAAC,cAAA,QAAMgD,UAAU,iBACdlD,EAAAC,EAAAC,cAAC0K,EAAA,EAAD,CAAiBC,KAAK,kBAI5B7K,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,gBAAgB2C,GAAG,gBAAgBoF,KAAK,QACrDjL,EAAAC,EAAAC,cAAA,OACEgD,UAAU,mBACVK,MAAO,CAAE2H,OAAQ,QAASC,UAAW,WAErCnL,EAAAC,EAAAC,cAAA,KACEkL,KAAK,IACLlI,UAAS,iBAAAvC,OAAsBuG,EAAuB,GAAd,aACxC/D,QAAS8E,EAAsB,KAHjC,UAOAjI,EAAAC,EAAAC,cAAA,MAAIgD,UAAU,qBACbjC,EAAQ0C,IAAI,SAAAuD,GAAM,OACjBlH,EAAAC,EAAAC,cAAA,KACEkL,KAAK,IACLvJ,IAAKqF,EACLhE,UAAU,gBACVC,QAAS8E,EAAsBf,IAE9BA,mBCpLrBmE,IAAQC,IAAIC,IAAaC,KAEzB,IAQeC,EARO,WACpB,OACEzL,EAAAC,EAAAC,cAAA,QAAMgD,UAAU,iBACdlD,EAAAC,EAAAC,cAACwL,EAAD,QCFcC,QACW,cAA7BC,OAAOnG,SAASoG,UAEe,UAA7BD,OAAOnG,SAASoG,UAEhBD,OAAOnG,SAASoG,SAASC,MACvB,2DCZNC,IAAShK,OAAO/B,EAAAC,EAAAC,cAAC8L,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhG,KAAK,SAAAiG,GACjCA,EAAaC","file":"static/js/main.88ee84fa.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Loading = () => {\n  return <span>Carregando</span>;\n};\n\nexport default Loading;\n","import React, { useState } from \"react\";\n\nimport ReactGoogleMapLoader from \"react-google-maps-loader\";\n\nimport { key } from \"../../key\";\n\nimport Loading from \"../Loading\";\n\nimport \"./styles.scss\";\n\ninterface Row {\n  [key: string]: string | number;\n}\n\nconst MAX_TRIES = 3;\nconst GEOCODER_TIMEOUT = 100;\n\nconst hasLatLng = (row: Row): boolean => !!row.latitude && !!row.longitude;\n\nconst getAddress = ({ NM_LOGRADO, NU_NUMERO }: Row): string =>\n  `${NM_LOGRADO} ${NU_NUMERO} SÃ£o Carlos - SP`;\n\nconst GetLatLng: React.FC<{\n  isActive?: boolean;\n  data: Row[];\n  headers: string[];\n  setData: (data: string) => void;\n  downloadData: () => void;\n  close: () => void;\n}> = ({ data, isActive, headers, setData, downloadData, close }) => {\n  const [geocoderStated, setGeocoderStarted] = useState(false);\n\n  return (\n    <ReactGoogleMapLoader\n      params={{ key, libraries: \"places,geometry\" }}\n      render={googleMaps => {\n        if (!!!googleMaps) {\n          return <Loading />;\n        }\n\n        const geocoder = new googleMaps.Geocoder();\n\n        const getLatLng = (\n          address: string\n        ): Promise<google.maps.GeocoderResult> => {\n          return new Promise((resolve, reject) => {\n            console.log(\"aqui no getLatLng \");\n            setTimeout(() => {\n              geocoder.geocode({ address }, (result, status) => {\n                if (status === googleMaps.GeocoderStatus.OK) {\n                  resolve(result[0]);\n                } else {\n                  console.error(status);\n                  reject(status);\n                }\n              });\n            }, GEOCODER_TIMEOUT);\n          });\n        };\n\n        const startGeocoder = () => {\n          setGeocoderStarted(true);\n\n          interface LatLngToBeDiscovered {\n            row: Row;\n            tries: number;\n          }\n\n          let allLatLngToBeDiscovered: LatLngToBeDiscovered[] = data\n            .filter(row => !hasLatLng(row))\n            .map(row => ({ tries: 0, row }));\n\n          const nextLatLngToBeDiscovered = ():\n            | LatLngToBeDiscovered\n            | undefined => {\n            for (const latLngToBeDiscovered of allLatLngToBeDiscovered) {\n              if (latLngToBeDiscovered.tries < MAX_TRIES) {\n                return latLngToBeDiscovered;\n              }\n            }\n          };\n\n          const getAllLatLng = async () => {\n            const next = nextLatLngToBeDiscovered();\n            if (!!!next) {\n              return;\n            }\n\n            try {\n              const address = getAddress(next.row);\n              const { geometry } = await getLatLng(address);\n              next.row.latitude = geometry.location.lat();\n              next.row.longitude = geometry.location.lng();\n              // Remove data\n              allLatLngToBeDiscovered = allLatLngToBeDiscovered.filter(\n                ({ row }) => row.id !== next.row.id\n              );\n              setData(JSON.stringify(data));\n            } catch (err) {\n              console.error(\"getAllLatLng err\", err);\n              next.tries += 1;\n            }\n\n            getAllLatLng();\n          };\n\n          getAllLatLng()\n            .then(() => {\n              console.log(data);\n              setGeocoderStarted(false);\n            })\n            .catch(console.error);\n        };\n\n        return (\n          <div className={`modal ${isActive && \"is-active\"}`}>\n            <div className=\"modal-background\" onClick={close} />\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <p className=\"modal-card-title\">\n                  Obter latitude e longitude de {data.length} dados\n                </p>\n                <button className=\"delete\" aria-label=\"close\" onClick={close} />\n              </header>\n              <section className=\"modal-card-body\">\n                <p className=\"title is-6\">\n                  Dados com latitude e longitude:{\" \"}\n                  {data.filter(row => hasLatLng(row)).length}\n                </p>\n\n                <hr />\n                <p className=\"title is-6\">\n                  Dados sem latitude e longitude:{\" \"}\n                  {data.filter(row => !hasLatLng(row)).length}\n                </p>\n              </section>\n              <footer\n                className=\"modal-card-foot\"\n                style={{ justifyContent: \"space-between\" }}\n              >\n                <button\n                  className={`button is-success ${\n                    geocoderStated ? \"is-loading\" : \"\"\n                  }`}\n                  disabled={data.filter(row => !hasLatLng(row)).length === 0}\n                  onClick={startGeocoder}\n                >\n                  Obter lat/lng\n                </button>\n                <button className=\"button\" onClick={downloadData}>\n                  Baixar novo arquivo\n                </button>\n              </footer>\n            </div>\n            <button className=\"modal-close is-large\" aria-label=\"close\" />\n          </div>\n        );\n      }}\n    />\n  );\n};\n\nexport default GetLatLng;\n","export const key = \"AIzaSyDimOyjTMfbc4oqMMXb4Shc9ODRaMR6h9U\";\n","import React, { useRef, useState } from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport XLSX from \"xlsx\";\n// import utf8 from \"utf8\";\n\nimport GetLatLng from \"../GetLatLng\";\n\nimport \"./styles.scss\";\n\ninterface Row {\n  [key: string]: string | number;\n}\n\nconst getHeaders = (json: Row[]): string[] => {\n  const headers: any = json.reduce((acc, row) => {\n    Object.keys(row).forEach(key => (acc[key] = 1));\n    return acc;\n  }, {});\n  return Object.keys(headers);\n};\n\nconst checkIfLatLngExist = (json: Row[]): boolean => {\n  return json.reduce<boolean>((acc, row) => {\n    return acc && !!row.latitude && !!row.longitude;\n  }, true);\n};\n\nconst Multimapa: React.FC = () => {\n  const [data, setData] = useState<string>(JSON.stringify([]));\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const [fileName, setFileName] = useState(\"\");\n  const [header, setHeader] = useState<string>(\"\");\n  const [headers, setHeaders] = useState<string[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showGetLatLng, setShowGetLatLng] = useState(false);\n\n  const fileRef = useRef<HTMLInputElement>(null);\n\n  const multimapaOnClick = () => {\n    setIsDropdownActive(false);\n  };\n\n  const dropdownOnClick = (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => {\n    event.stopPropagation();\n    setIsDropdownActive(!isDropdownActive);\n  };\n\n  const dropdownHeaderOnClick = (header: string) => () => setHeader(header);\n\n  const openFileOnClick = () => {\n    if (fileRef && fileRef.current) {\n      fileRef.current.click();\n    }\n  };\n\n  const fileInputOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!!!event.target.files) {\n      return;\n    }\n\n    setLoading(true);\n\n    const file = event.target.files[0];\n    setFileName(file.name);\n\n    const reader = new FileReader();\n    reader.readAsBinaryString(file);\n    reader.onload = () => {\n      const data = reader.result;\n      const workbook = XLSX.read(data, { type: \"binary\" });\n      const firstSheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[firstSheetName];\n\n      const json: Array<{ [key: string]: any }> = XLSX.utils\n        .sheet_to_json(worksheet)\n        // add id to json if it not exists\n        .map((row, index) => ({ id: index, ...row }));\n\n      setData(JSON.stringify(json));\n\n      setHeaders(getHeaders(json));\n\n      setLoading(true);\n\n      if (!checkIfLatLngExist(json)) {\n        setShowGetLatLng(true);\n      } else {\n        setLoading(false);\n      }\n    };\n  };\n\n  const closeGetLatLng = () => {\n    setShowGetLatLng(false);\n    setLoading(false);\n  };\n\n  const downloadData = () => {\n    const workbook = XLSX.utils.book_new();\n    workbook.SheetNames.push(\"Dados\");\n    const worksheet = XLSX.utils.json_to_sheet(JSON.parse(data));\n    workbook.Sheets[\"Dados\"] = worksheet;\n    XLSX.writeFile(workbook, `${fileName.split(\".\")[0]}_lat-lng.xlsx`);\n  };\n\n  return (\n    <div className=\"Multimapa\" onClick={multimapaOnClick}>\n      <GetLatLng\n        isActive={showGetLatLng}\n        data={JSON.parse(data)}\n        headers={headers}\n        setData={setData}\n        close={closeGetLatLng}\n        downloadData={downloadData}\n      />\n      <nav className=\"panel\">\n        <div className=\"panel-block\">\n          <input\n            style={{ display: \"none\" }}\n            accept=\".xlsx, .xls, .csv\"\n            type=\"file\"\n            id=\"fileInput\"\n            ref={fileRef}\n            onChange={fileInputOnChange}\n          />\n          <button\n            className={`button is-primary is-fullwidth ${\n              loading ? \"is-loading\" : \"\"\n            }`}\n            onClick={openFileOnClick}\n          >\n            Carregar Dados\n          </button>\n        </div>\n        <p className=\"panel-heading\">{`Dados Geolocalizados ${\n          fileName ? \"- \" + fileName : \"\"\n        }`}</p>\n        <div className=\"panel-block\">\n          <p className=\"control has-icons-left\">\n            <input\n              className=\"input is-small\"\n              type=\"text\"\n              placeholder=\"procurar\"\n            />\n            <span className=\"icon is-small is-left\">\n              <FontAwesomeIcon icon=\"search\" />\n            </span>\n          </p>\n        </div>\n        <div className=\"panel-tabs\">\n          <div\n            className={`dropdown ${isDropdownActive ? \"is-active\" : \"\"}`}\n            onClick={dropdownOnClick}\n          >\n            <div className=\"dropdown-trigger\">\n              <button\n                className=\"button\"\n                aria-haspopup=\"true\"\n                aria-controls=\"dropdown-menu\"\n              >\n                <span>{`Agrupar por ${header ? \": \" + header : \"\"}`}</span>\n                <span className=\"icon is-small\">\n                  <FontAwesomeIcon icon=\"angle-down\" />\n                </span>\n              </button>\n            </div>\n            <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n              <div\n                className=\"dropdown-content\"\n                style={{ height: \"300px\", overflowY: \"scroll\" }}\n              >\n                <a\n                  href=\"#\"\n                  className={`dropdown-item ${!!!header ? \"is-active\" : \"\"}`}\n                  onClick={dropdownHeaderOnClick(\"\")}\n                >\n                  Nenhum\n                </a>\n                <hr className=\"dropdown-divider\" />\n                {headers.map(header => (\n                  <a\n                    href=\"#\"\n                    key={header}\n                    className=\"dropdown-item\"\n                    onClick={dropdownHeaderOnClick(header)}\n                  >\n                    {header}\n                  </a>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Multimapa;\n","import React from \"react\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faAngleDown, faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Multimapa from \"./components/Multimapa\";\n\nimport \"./App.scss\";\n\nlibrary.add(faAngleDown, faSearch);\n\nconst App: React.FC = () => {\n  return (\n    <main className=\"App container\">\n      <Multimapa />\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}